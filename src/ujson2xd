#!/usr/bin/env python

import os
import json
import xdfile

POSSIBLE_META_DATA = ['Title', 'Author', 'Editor', 'Copyright']
BLOCK_CHAR = '#'

def parse_ujson(content):
    json_data = json.loads(content)

    # init crossword
    rows = int(json_data['Height'])
    xd = xdfile.xdfile()

    # add meta data
    for item in POSSIBLE_META_DATA:
        text = json_data.get(item, None)
        if text:
            xd.headers.append((item, text))

    # add puzzle
    for row in range(1, rows+1):
        line = json_data['Solution']['Line'+str(row)]
        xd.grid.append("".join(line.replace(' ', BLOCK_CHAR)))

    # add clues
    layout = json_data['Layout']
    for clue_type in ('Across', 'Down'):
        for clue in json_data[clue_type + 'Clue'].split(os.linesep):
            number, text = clue.split('|')
            solution = _get_solution(number, clue_type[0], layout, xd.grid)
            xd.clues.append(((clue_type[0], number), text, solution))

    return xd

def _get_solution(number, direction, layout, puzzle):
    x, y = (-1, -1)
    for row in range(1, len(puzzle)+1):
        line = layout['Line'+str(row)]
        try:
            x = line.index(number) / 2
            y = row - 1
            break;
        except ValueError:
            pass

    # read puzzle text from (x,y) in the given direction
    # until we hit a block
    text = ''
    if direction == 'A':
        try:
            x_limit = puzzle[y].index(BLOCK_CHAR, x)
        except ValueError:
            x_limit = len(puzzle[y])
        text = ''.join(puzzle[y][x:x_limit])
    elif direction == 'D':
        for row in range(y, len(puzzle)):
            char = puzzle[row][x]
            if char == BLOCK_CHAR:
                break
            text += char
    return text

if __name__ == "__main__":
    import framework

    framework.main(parse_ujson)
